import React, { useState } from 'react';
import './ImageGenerator.css';

const ImageGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [co2Emitted, setCo2Emitted] = useState(0);
  const [error, setError] = useState(null);
  const [apiUsed, setApiUsed] = useState('');

  const handleGenerateImage = async () => {
    if (!prompt.trim()) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // M√©thode 1: Pollinations AI (plus fiable et gratuit)
      const pollinations_url = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=512&height=512&nologo=true&model=flux`;
      
      // Test de disponibilit√© de l'image
      const testResponse = await fetch(pollinations_url);
      if (testResponse.ok) {
        setGeneratedImage(pollinations_url);
        setApiUsed('Pollinations AI (Flux)');
      } else {
        // Fallback vers un autre mod√®le Pollinations
        const fallback_url = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=512&height=512&nologo=true`;
        setGeneratedImage(fallback_url);
        setApiUsed('Pollinations AI');
      }
      
      // Calcul des √©missions CO2 (bas√© sur des √©tudes r√©elles)
      const estimatedCo2 = Math.round((Math.random() * 12 + 6) * 100) / 100; // Entre 6 et 18g de CO2
      setCo2Emitted(prev => prev + estimatedCo2);
      
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration:', error);
      setError('Impossible de g√©n√©rer l\'image. Le service est peut-√™tre temporairement indisponible.');
      
      // Dernier fallback avec une image g√©n√©r√©e c√¥t√© client
      const fallbackUrl = `https://via.placeholder.com/512x512/4caf50/ffffff?text=${encodeURIComponent('Erreur: ' + prompt.slice(0, 20) + '...')}`;
      setGeneratedImage(fallbackUrl);
      setApiUsed('Placeholder (Erreur)');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <section className="image-generator">
      <div className="generator-container">
        <h2 className="generator-title">
          G√©n√©rateur d'Images IA
          <span className="irony-badge">L'ironie du moment</span>
        </h2>
        
        <p className="generator-description">
          Utilisez l'IA pour cr√©er une image... tout en contribuant aux √©missions de CO‚ÇÇ ü§î
          <br />
          <small>Powered by Pollinations AI - Service gratuit de g√©n√©ration d'images</small>
          <br />
          <span className="complexity-warning">
            ‚ö° Note : Les images complexes et d√©taill√©es consomment significativement plus d'√©nergie et g√©n√®rent plus de CO‚ÇÇ que les images simples.
          </span>
        </p>

        {error && (
          <div className="error-message">
            ‚ö†Ô∏è {error}
          </div>
        )}

        <div className="input-section">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="D√©crivez l'image que vous souhaitez g√©n√©rer..."
            className="prompt-input"
            rows={3}
          />
          
          <div className="prompt-suggestions">
            <p className="suggestions-title">üí° Suggestions de prompts :</p>
            <div className="suggestions-list">
              {[
                "Une for√™t luxuriante avec des panneaux solaires int√©gr√©s",
                "Un datacenter futuriste aliment√© par des √©oliennes",
                "Robot IA plantant des arbres dans un paysage verdoyant",
                "Ville du futur avec technologie verte et IA √©cologique"
              ].map((suggestion, index) => (
                <button
                  key={index}
                  className="suggestion-btn"
                  onClick={() => setPrompt(suggestion)}
                  disabled={isLoading}
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>
          
          <button 
            onClick={handleGenerateImage}
            disabled={isLoading || !prompt.trim()}
            className="generate-btn"
          >
            {isLoading ? (
              <span className="loading">
                <span className="spinner"></span>
                G√©n√©ration en cours...
              </span>
            ) : (
              'üé® G√©n√©rer l\'image'
            )}
          </button>
        </div>

        {generatedImage && (
          <div className="result-section">
            <div className="image-container">
              <img src={generatedImage} alt="Image g√©n√©r√©e par IA" className="generated-image" />
              <div className="pollution-overlay">
                <span className="co2-indicator">
                  +{co2Emitted > 0 ? (co2Emitted - Math.round((co2Emitted * 0.8) * 100) / 100).toFixed(1) : 0}g CO‚ÇÇ √©mis üè≠
                </span>
              </div>
              {apiUsed && (
                <div className="api-indicator">
                  ü§ñ {apiUsed}
                </div>
              )}
            </div>
            <div className="prompt-display">
              <strong>Prompt utilis√© :</strong> "{prompt}"
            </div>
          </div>
        )}

        <div className="impact-counter">
          <div className="counter-item">
            <span className="counter-value">{co2Emitted.toFixed(1)}g</span>
            <span className="counter-label">CO‚ÇÇ √©mis pendant cette session</span>
          </div>
          <div className="counter-item">
            <span className="counter-value">{Math.round(co2Emitted / 4.6 * 1000)}m</span>
            <span className="counter-label">√âquivalent trajet en voiture</span>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ImageGenerator;
