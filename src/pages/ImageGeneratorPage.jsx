import React, { useState } from 'react';
import './ImageGeneratorPage.css';

const ImageGeneratorPage = ({ onNext, sessionData, setSessionData }) => {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [apiUsed, setApiUsed] = useState('');

  const handleGenerateImage = async () => {
    if (!prompt.trim()) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // M√©thode 1: Pollinations AI (plus fiable et gratuit)
      const pollinations_url = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=512&height=512&nologo=true&model=flux`;
      
      // Test de disponibilit√© de l'image
      const testResponse = await fetch(pollinations_url);
      if (testResponse.ok) {
        setGeneratedImage(pollinations_url);
        setApiUsed('Pollinations AI (Flux)');
      } else {
        // Fallback vers un autre mod√®le Pollinations
        const fallback_url = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=512&height=512&nologo=true`;
        setGeneratedImage(fallback_url);
        setApiUsed('Pollinations AI');
      }
      
      // Calcul des √©missions CO2 bas√© sur les nouvelles donn√©es r√©elles
      const estimatedCo2 = Math.round((Math.random() * 0.5 + 0.8) * 100) / 100; // Entre 0.8 et 1.3g de CO2 pour une image
      setSessionData(prev => ({
        ...prev,
        co2Emitted: prev.co2Emitted + estimatedCo2,
        imagesGenerated: prev.imagesGenerated + 1
      }));
      
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration:', error);
      setError('Impossible de g√©n√©rer l\'image. Le service est peut-√™tre temporairement indisponible.');
      
      // Dernier fallback avec une image g√©n√©r√©e c√¥t√© client
      const fallbackUrl = `https://via.placeholder.com/512x512/4caf50/ffffff?text=${encodeURIComponent('Erreur: ' + prompt.slice(0, 20) + '...')}`;
      setGeneratedImage(fallbackUrl);
      setApiUsed('Placeholder (Erreur)');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="image-generator-page">
      <div className="page-container">
        <div className="page-header">
          <h1 className="page-title">
            üé® G√©n√©rateur d'Images IA
            <span className="irony-badge">L'ironie du moment</span>
          </h1>
          <p className="page-description">
            Utilisez l'IA pour cr√©er une image... tout en contribuant aux √©missions de CO‚ÇÇ ü§î
            <br />
            <small>Powered by Pollinations AI - Service gratuit de g√©n√©ration d'images</small>
          </p>
          <div className="complexity-warning">
            ‚ö° Note : Les images complexes et d√©taill√©es consomment significativement plus d'√©nergie et g√©n√®rent plus de CO‚ÇÇ que les images simples.
          </div>
        </div>

        {error && (
          <div className="error-message">
            ‚ö†Ô∏è {error}
          </div>
        )}

        <div className="generator-section">
          <div className="input-section">
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="D√©crivez l'image que vous souhaitez g√©n√©rer..."
              className="prompt-input"
              rows={3}
            />
            
            <div className="prompt-suggestions">
              <p className="suggestions-title">üí° Suggestions de prompts :</p>
              <div className="suggestions-list">
                {[
                  "Une for√™t luxuriante avec des panneaux solaires int√©gr√©s",
                  "Un datacenter futuriste aliment√© par des √©oliennes",
                  "Robot IA plantant des arbres dans un paysage verdoyant",
                  "Ville du futur avec technologie verte et IA √©cologique"
                ].map((suggestion, index) => (
                  <button
                    key={index}
                    className="suggestion-btn"
                    onClick={() => setPrompt(suggestion)}
                    disabled={isLoading}
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
            
            <button 
              onClick={handleGenerateImage}
              disabled={isLoading || !prompt.trim()}
              className="generate-btn"
            >
              {isLoading ? (
                <span className="loading">
                  <span className="spinner"></span>
                  G√©n√©ration en cours...
                </span>
              ) : (
                'üé® G√©n√©rer l\'image'
              )}
            </button>
          </div>

          {generatedImage && (
            <div className="result-section">
              <div className="image-container">
                <img src={generatedImage} alt="Image g√©n√©r√©e par IA" className="generated-image" />
                <div className="pollution-overlay">
                  <span className="co2-indicator">
                    +{sessionData.co2Emitted > 0 ? (sessionData.co2Emitted / sessionData.imagesGenerated).toFixed(1) : 0}g CO‚ÇÇ
                  </span>
                </div>
                {apiUsed && (
                  <div className="api-indicator">
                    ü§ñ {apiUsed}
                  </div>
                )}
              </div>
              <div className="prompt-display">
                <strong>Prompt utilis√© :</strong> "{prompt}"
              </div>
            </div>
          )}
        </div>

        <div className="session-stats">
          <h3 className="stats-title">üìä Votre Impact Actuel</h3>
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-value">{sessionData.imagesGenerated}</span>
              <span className="stat-label">Image(s) g√©n√©r√©e(s)</span>
            </div>
            <div className="stat-item">
              <span className="stat-value">{sessionData.co2Emitted.toFixed(1)}g</span>
              <span className="stat-label">CO‚ÇÇ √©mis</span>
            </div>
            <div className="stat-item">
              <span className="stat-value">{Math.round(sessionData.co2Emitted / 4.6 * 1000)}m</span>
              <span className="stat-label">√âquivalent voiture</span>
            </div>
          </div>
        </div>

        <div className="page-navigation">
          <button 
            className="next-btn"
            onClick={onNext}
            disabled={sessionData.imagesGenerated === 0}
          >
            Continuer vers le Quiz üß†
            <span className="btn-arrow">‚Üí</span>
          </button>
          {sessionData.imagesGenerated === 0 && (
            <p className="nav-hint">G√©n√©rez au moins une image pour continuer</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ImageGeneratorPage;
